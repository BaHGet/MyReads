{"ast":null,"code":"const api = \"https://reactnd-books-api.udacity.com\";\nlet token = localStorage.token;\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token\n};\nexport const get = bookId => fetch(`${api}/books/${bookId}`, {\n  headers\n}).then(res => res.json()).then(data => data.book).catch(error => console.log(error));\nexport const getAll = () => fetch(`${api}/books`, {\n  headers\n}).then(res => res.json()).then(data => data.books).catch(error => console.log(error));\nexport const update = (book, shelf) => fetch(`${api}/books/${book.id}`, {\n  method: \"PUT\",\n  headers: { ...headers,\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    shelf\n  })\n}).then(res => res.json()).catch(error => console.log(error));\nexport const search = (query, maxResults) => fetch(`${api}/search`, {\n  method: \"POST\",\n  headers: { ...headers,\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    query,\n    maxResults\n  })\n}).then(res => res.json()).then(data => data.books).catch(error => console.log(error));","map":{"version":3,"sources":["C:/Users/abosa/Desktop/MyReads/starter/src/BooksAPI.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","bookId","fetch","then","res","json","data","book","catch","error","console","log","getAll","books","update","shelf","id","method","body","JSON","stringify","search","query","maxResults"],"mappings":"AAAA,MAAMA,GAAG,GAAG,uCAAZ;AAEA,IAAIC,KAAK,GAAGC,YAAY,CAACD,KAAzB;AAEA,IAAI,CAACA,KAAL,EAAYA,KAAK,GAAGC,YAAY,CAACD,KAAb,GAAqBE,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAC,CAAnC,CAA7B;AAEZ,MAAMC,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAE,kBADM;AAEdC,EAAAA,aAAa,EAAER;AAFD,CAAhB;AAKA,OAAO,MAAMS,GAAG,GAAIC,MAAD,IACjBC,KAAK,CAAE,GAAEZ,GAAI,UAASW,MAAO,EAAxB,EAA2B;AAAEJ,EAAAA;AAAF,CAA3B,CAAL,CACCM,IADD,CACOC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADf,EAECF,IAFD,CAEOG,IAAD,IAAUA,IAAI,CAACC,IAFrB,EAGCC,KAHD,CAGQC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAHlB,CADK;AAMP,OAAO,MAAMG,MAAM,GAAG,MACpBV,KAAK,CAAE,GAAEZ,GAAI,QAAR,EAAiB;AAAEO,EAAAA;AAAF,CAAjB,CAAL,CACGM,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAUA,IAAI,CAACO,KAFvB,EAGGL,KAHH,CAGUC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAHpB,CADK;AAMP,OAAO,MAAMK,MAAM,GAAG,CAACP,IAAD,EAAOQ,KAAP,KACpBb,KAAK,CAAE,GAAEZ,GAAI,UAASiB,IAAI,CAACS,EAAG,EAAzB,EAA4B;AAC/BC,EAAAA,MAAM,EAAE,KADuB;AAE/BpB,EAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEP,oBAAgB;AAFT,GAFsB;AAM/BqB,EAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEL,IAAAA;AAAF,GAAf;AANyB,CAA5B,CAAL,CAOGZ,IAPH,CAOSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPjB,EAQCG,KARD,CAQQC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CARlB,CADK;AAWP,OAAO,MAAMY,MAAM,GAAG,CAACC,KAAD,EAAQC,UAAR,KACpBrB,KAAK,CAAE,GAAEZ,GAAI,SAAR,EAAkB;AACrB2B,EAAAA,MAAM,EAAE,MADa;AAErBpB,EAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEP,oBAAgB;AAFT,GAFY;AAMrBqB,EAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEE,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAf;AANe,CAAlB,CAAL,CAQGpB,IARH,CAQSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EARjB,EASGF,IATH,CASSG,IAAD,IAAUA,IAAI,CAACO,KATvB,EAUGL,KAVH,CAUUC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAVpB,CADK","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\n\nlet token = localStorage.token;\n\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\n\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n  .then((res) => res.json())\n  .then((data) => data.book)\n  .catch((error) => console.log(error));\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.books)\n    .catch((error) => console.log(error));\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json())\n  .catch((error) => console.log(error));\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ query, maxResults }),\n  })\n    .then((res) => res.json())\n    .then((data) => data.books)\n    .catch((error) => console.log(error))\n"]},"metadata":{},"sourceType":"module"}