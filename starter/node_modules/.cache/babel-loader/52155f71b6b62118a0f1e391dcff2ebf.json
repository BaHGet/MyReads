{"ast":null,"code":"const api = \"https://reactnd-books-api.udacity.com\";\nlet token = localStorage.token;\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token\n};\nexport const get = bookId => fetch(`${api}/books/${bookId}`, {\n  headers\n}).then(res => res.json()).then(data => data.book);\nexport const getAll = () => fetch(`${api}/books`, {\n  headers\n}).then(res => res.json()).then(data => data.books);\nexport const update = (book, shelf) => fetch(`${api}/books/${book.id}`, {\n  method: \"PUT\",\n  headers: { ...headers,\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    shelf\n  })\n}).then(res => res.json());\nlet Data;\n\nconst search = (query, maxResults) => fetch(`${api}/search`, {\n  method: \"POST\",\n  headers: { ...headers,\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    query,\n    maxResults\n  })\n}).then(res => res.json()).then(data => data = Data.books);\n\nconst main = (method, ar1, arg2) => {\n  if (method === 'search') {\n    search(ar1, arg2);\n    return Data;\n  }\n};\n\ne;","map":{"version":3,"sources":["C:/Users/abosa/Desktop/MyReads/starter/src/BooksAPI.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","bookId","fetch","then","res","json","data","book","getAll","books","update","shelf","id","method","body","JSON","stringify","Data","search","query","maxResults","main","ar1","arg2","e"],"mappings":"AAAA,MAAMA,GAAG,GAAG,uCAAZ;AAEA,IAAIC,KAAK,GAAGC,YAAY,CAACD,KAAzB;AAEA,IAAI,CAACA,KAAL,EAAYA,KAAK,GAAGC,YAAY,CAACD,KAAb,GAAqBE,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAC,CAAnC,CAA7B;AAEZ,MAAMC,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAE,kBADM;AAEdC,EAAAA,aAAa,EAAER;AAFD,CAAhB;AAKA,OAAO,MAAMS,GAAG,GAAIC,MAAD,IACjBC,KAAK,CAAE,GAAEZ,GAAI,UAASW,MAAO,EAAxB,EAA2B;AAAEJ,EAAAA;AAAF,CAA3B,CAAL,CACGM,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAUA,IAAI,CAACC,IAFvB,CADK;AAKP,OAAO,MAAMC,MAAM,GAAG,MACpBN,KAAK,CAAE,GAAEZ,GAAI,QAAR,EAAiB;AAAEO,EAAAA;AAAF,CAAjB,CAAL,CACGM,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAUA,IAAI,CAACG,KAFvB,CADK;AAKP,OAAO,MAAMC,MAAM,GAAG,CAACH,IAAD,EAAOI,KAAP,KACpBT,KAAK,CAAE,GAAEZ,GAAI,UAASiB,IAAI,CAACK,EAAG,EAAzB,EAA4B;AAC/BC,EAAAA,MAAM,EAAE,KADuB;AAE/BhB,EAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEP,oBAAgB;AAFT,GAFsB;AAM/BiB,EAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEL,IAAAA;AAAF,GAAf;AANyB,CAA5B,CAAL,CAOGR,IAPH,CAOSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPjB,CADK;AAUL,IAAIY,IAAJ;;AAEF,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAQC,UAAR,KACblB,KAAK,CAAE,GAAEZ,GAAI,SAAR,EAAkB;AACrBuB,EAAAA,MAAM,EAAE,MADa;AAErBhB,EAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEP,oBAAgB;AAFT,GAFY;AAMrBiB,EAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEG,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAf;AANe,CAAlB,CAAL,CAQGjB,IARH,CAQSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EARjB,EASGF,IATH,CASSG,IAAD,IAAUA,IAAI,GAAGW,IAAI,CAACR,KAT9B,CADF;;AAaA,MAAMY,IAAI,GAAG,CAACR,MAAD,EAASS,GAAT,EAAcC,IAAd,KAAsB;AAC/B,MAAGV,MAAM,KAAK,QAAd,EAAuB;AACrBK,IAAAA,MAAM,CAACI,GAAD,EAAMC,IAAN,CAAN;AACA,WAAON,IAAP;AACD;AACJ,CALD;;AAOAO,CAAC","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\r\n\r\nlet token = localStorage.token;\r\n\r\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\r\n\r\nconst headers = {\r\n  Accept: \"application/json\",\r\n  Authorization: token,\r\n};\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then((res) => res.json())\r\n    .then((data) => data.book);\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then((res) => res.json())\r\n    .then((data) => data.books);\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ shelf }),\r\n  }).then((res) => res.json());\r\n\r\n  let Data;\r\n\r\nconst search = (query, maxResults) =>\r\n  fetch(`${api}/search`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ query, maxResults }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((data) => data = Data.books)\r\n\r\n\r\nconst main = (method, ar1, arg2) =>{\r\n    if(method === 'search'){\r\n      search(ar1, arg2);\r\n      return Data;\r\n    }\r\n}\r\n\r\ne\r\n"]},"metadata":{},"sourceType":"module"}